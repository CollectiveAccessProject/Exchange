<div class="panel panel-primary" id="results_resource">
	<% if @show %>
		<div class="panel-body">
			<div>
			  <div class="row">
				<div class="col-sm-12">
					<h4>
						<div class="row">
							<div class="col-lg-5 col-md-5 col-sm-5 col-xs-5"><%= @resources_count %> resource<%= (@resources_count == 1) ? "" : "s" %>
								<% if @resources_num_pages > 0 %>
									<button id='resourceResultsRefineTrigger' class='btn btn-default'>Refine</button>
								<% end %>
								<button type="button" class="modalOpen btn btn-sm btn-primary hidden-md hidden-lg modalRefine" data-toggle="modal" data-target="#filterModal_resource" href="#">Refine</button>
							</div>
							<div id="resource_right" class="col-lg-7 col-md-7 col-sm-7 col-xs-7 text-right">
								<form class="searchPaging">
									<div class="searchFormElement">
										<nobr>Sort by <%= select_tag("resource_sort", options_for_select(sortOptions('resource'), @sort_defaults['resource']), {id: "resource_sort"}) %></nobr>
									</div>
								</form>
							</div>
						</div>
					</h4>
				</div>
			  </div>
			  <div class="row" id="resourceResultsContainer">
				<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
				<% if @refine and @refine["resource"] and (@refine["resource"].values.reduce(0) {|sum, v| sum = sum + v.length } > 0) %>
					<div id="collectionObjectResults-filters">
							<strong>Filters: </strong>
							<% format_refine_filters(@refine, "resource").each do |r| %>
								<%= r[:field] %>: <em> <%= r[:value] %></em>
								<a href="#" data-remove_id="<%= r[:filter] %>" class="removeFilter"><i class="fa fa-times" aria-hidden="true"></i></a>
							<% end%>
						</div>
					<% end%>
					
				  <div id="resourceResults-status">
					<div class="flash-notice" id="resourceResults-status-message">

					</div>
				  </div>
				  <% if (current_user && @available_collections && (@available_collections.length > 0)) %>
				  	<div class='pull-right'>
								<button id='resourceResultsSelectAllTrigger' class='btn btn-default' data-toggle='0'>Select all</button>
							</div>
					  <div>
						<form class="resourceResultsAdd">
						  Add checked results to existing collection <%=
						  if(@available_collections.length > 25)
							autocomplete_field_tag(:find_resource_id, '', :autocomplete_collection_title, :"data-autocomplete-label" => "Sorry, nothing found.", :size => 40, :id_element => "#resource_add_to_collection_id", :placeholder => "Search for a collection") + hidden_field_tag(:resource_add_to_collection_id)
						  else
							select_tag(:resource_add_to_collection_id, options_from_collection_for_select(@available_collections, :id, lambda {|t| strip_tags(t.title)}), class:'resource_add_to_collection', id:'resource_add_to_collection_id')
						  end

						%>
						  <%= button_tag "<span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span> Add".html_safe, href: "#", class: "btn btn-noBg btn-xs", id: "resourceResultsAddToCollection"  %>
						</form>
					  </div>
				  <% end %>

				</div>
				<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="border-left: 1px dotted #ccc;">
					
<%
	col = 0
	thumb = false
%>
				<div id="resource_results" class="row results-pane" data-type="resource">
					<% @resources.each do |r| %>
						<%= render 'resource', resource: r %>
					<% end  %>
				</div>
				<div class="infinite-pagination-message"></div>
				<%= will_paginate @resources, renderer: Exchange::QuickSearchLinkRenderer, class: 'infinite-pagination-resources', type: 'resource', query: @query_proc %>
				<% if current_user %>
					<div class="row">
						<div class="col-md-12">
							<div class="text-center quickSearchAccessMessage"><i class="fa fa-eye-slash" aria-hidden="true"></i> Not available to public </div>
						</div>
					</div>
				<% end %>
			</div>
		</div>
			</div>
		</div>

		<%= render :partial => "quick_search/filter_modal.html.erb", :locals => {type: "resource", prefix: "resource"} %>
		
		<div class="hidden-sm hidden-xs col-md-3 col-lg-3 refineContainer" id="resourceRefineContainer">
					<h3 class="quickSearchRefineHeader">Refine by</h3>
					<div class="row">
						<div class="col-md-12">
							<h6>Author name</h6>
							<%= autocomplete_field_tag(:resource_find_author, '', quick_search_autocomplete_refine_url(query: @query, field: "author.raw", type: "resource"), :"data-autocomplete-label" => "Sorry, nothing found.", :"data-update-elements" => nil, :size => 20, :id_element => "#resource_author", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "author") + hidden_field_tag(:resource_author) %>
						</div>
					</div>
					<div class="row">
						<div class="col-md-12">
							<h6>Title</h6>
							<%= autocomplete_field_tag(:resource_find_title, '', quick_search_autocomplete_refine_url(query: @query, field: "title.raw", type: "resource"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#resource_rtitle", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "title") + hidden_field_tag(:resource_rtitle) %>
						</div>
					</div>
					<div class="row">
						<div class="col-md-12">
							<h6>Keywords/tags</h6>
							<%= autocomplete_field_tag(:resource_find_keywords, '', quick_search_autocomplete_refine_url(query: @query, field: "all_keywords.raw", type: "resource"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#resource_keywords", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "all_keywords") + hidden_field_tag(:resource_keywords) %>
						</div>
					</div>
					<div class="row">
						<div class="col-md-12">
							<h6>Created for</h6>
							<% Rails.application.config.x.user_roles.each do |label, v| %>
								<% is_selected = (session[:refine] and session[:refine]["resource"] and session[:refine]["resource"].has_key?("affiliation") and session[:refine]["resource"]["affiliation"].include?("affiliation:\"" + v.to_s + "\"")) %>
								<% if !is_selected %>
									<%= (check_box_tag(:resource_created_for, value = v, checked = is_selected, options = {class: "quickSearchRefineCheckbox", "data-filter": "affiliation"}) + " " + label).html_safe %><br/>
								<% end %>
							<% end %>
						</div>
					</div>
					<div class="row">
						<div class="col-md-12">
							<h6>Avg vistor rating</h6>
				<% 5.downto(1).each do |r| %>
					<%= ('<a href="#" class="resource_rating" data-rating="' + r.to_s + '">' + ('<img src="/assets/mortarboard_on.png" alt="Mortarboard" width="29" height="20"/>' * r) + '</a>').html_safe %> &amp; up<br/>
				<% end %>
						</div>
					</div>
			<% if current_user %>
					<div class="row">
						<div class="col-md-12">
							<h6>Access type</h6>
							<% Rails.application.config.x.access_types.each do |label, v| %>
								<% is_selected = (session[:refine] and session[:refine]["resource"] and session[:refine]["resource"].has_key?("access") and session[:refine]["resource"]["access"].include?("access:\"" + v.to_s + "\"")) %>
								<% if !is_selected %>
									<%= (check_box_tag(:resource_access, value = v, checked = is_selected, options = {class: "quickSearchRefineCheckbox", "data-filter": "access"}) + " " + label).html_safe %><br/>
								<% end %>
							<% end %>
						</div>
					</div>
					<div class="row">
						<div class="col-md-12">
							<h6>Date last updated</h6>
							<select name="resource_date_last_updated_mode" id="resource_date_last_updated_mode" class="quickSearchRefineDateMode">
								<option value="in">on</option>
								<option value="before">before</option>
								<option value="after">after</option>
								<option value="between">between</option>
							</select>
							<input type="text" name="resource_date_last_updated_date" id="resource_date_last_updated_date" class="quickSearchRefineDate quickSearchRefineDatePicker"/>
							<span id="resource_date_last_updated_range"  style="display:none;">
								<input type="text" name="resource_date_last_updated_min" id="resource_date_last_updated_min" class="quickSearchRefineDateRange quickSearchRefineDatePicker"/> - 
								<input type="text" name="resource_date_last_updated_max" id="resource_date_last_updated_max" class="quickSearchRefineDateRange quickSearchRefineDatePicker"/>
							</span>
							<a href="#" onclick="return false;"><span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span></a>
						</div>
					</div>
			<% end %>
				</div>

	<script type="text/javascript">
		//jQuery(document).ready(function() {
			jQuery("#quick_search_tabs").on('change', "#resource_num_items_per_page, #resource_sort", function(e) {
				jQuery.getJSON("<%= query_results_path(type: "resource", page: @resources_page, query: @query) %>?length=" + jQuery("#resource_num_items_per_page").val() + "&sort=" + jQuery("#resource_sort").val(), function(data) {
					jQuery("#results_resource").html(data.html);
					return true;
				});
			}).on('click', "#resourceResultsAddToCollection", function(e) {
				e.preventDefault();

				var add_to_collection_id = jQuery("#resource_add_to_collection_id").val();

				var ids = jQuery("#results_resource input.qsResultCheckbox").map(function() {
					return jQuery(this).prop('checked') ? jQuery(this).val(): undefined;
				}).get()

				if (!ids || (ids.length == 0)) {
					jQuery("#resourceResults-status").slideDown(250);
					jQuery("#resourceResults-status-message").html("No items are checked");
					window.setTimeout(function() {
						jQuery("#resourceResults-status").slideUp(250);
					}, 3000);
					return false;
				}

				jQuery.post("/resources/" + add_to_collection_id + "/add_child_resources", {"add_child_resource_ids[]": ids}, function(data) {
					var n = data.numAdded;
					existed_msg = (data.numExisting > 0) ? ((data.numExisting == 1) ? " (1 already exists)" :  " (" + data.numExisting + " already exist)") : "";

					jQuery("#resourceResults-status").slideDown(250);
					jQuery("#resourceResults-status-message").html(((n == 1) ? "Added 1 resource to collection" : "Added " + n + " resources to collection") + existed_msg);
					window.setTimeout(function() {
						jQuery("#resourceResults-status").slideUp(250);
					}, 3000);

					jQuery("#results_resource input.qsResultCheckbox").prop('checked', false);
					return true;
				}, 'json');
				return false;
			});
		   //  resizeBar("#resource_title_link", "#resource_right");	
	//         $(window).on('resize', function(){
	//             resizeBar("#resource_title_link", "#resource_right");
	//         });
		
			// Refine UI: autocomplete add filter
			jQuery('#results_resource').off().on('railsAutocomplete.select', ".quickSearchRefineAutocomplete", function(event, data){
				var filter = jQuery(event.target).data('filter');
				event.preventDefault();
			
				if (!filter) { return false; }
			
				jQuery('#filterModal_resource').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "resource", page: @resources_page, query: @query) %>?refine[]=" + filter + ":\"" + data.item.id + "\"", function(data) {
					jQuery("#results_resource").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
		
			// Refine UI: checkbox add filter
			jQuery('#results_resource').on('change', "input.quickSearchRefineCheckbox", function(event){
				var filter = jQuery(event.target).data('filter');
				var val = jQuery(this).val();
				event.preventDefault();
			
				if (!filter || (val < 0)) { return false; }
			
				jQuery('#filterModal_resource').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "resource", page: @resources_page, query: @query) %>?refine[]=" + filter + ":\"" + val + "\"", function(data) {
					jQuery("#results_resource").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
		
			// Refine UI: date filter
			jQuery('#results_resource').on('change', "#resource_date_last_updated_mode", function(event){
				updateDateFilterUI('resource');
			});
			jQuery('#results_resource').on('blur', "#resource_date_last_updated_date, #resource_date_last_updated_min, #resource_date_last_updated_max", function(event){
				var date_expr = getDateExprFromFilterUI('resource');
				if (date_expr) {
					jQuery('#filterModal_resource').modal('hide');
					jQuery(".loading").show();
					jQuery.getJSON("<%= query_results_path(type: "resource", page: @resources_page, query: @query) %>?refine[]=" + date_expr, function(data) {
						jQuery("#results_resource").html(data.html);
						jQuery(".loading").hide();
						return true;
					});
				}
			});
			$('.quickSearchRefineDatePicker').datetimepicker({"format": "YYYY-MM-DD"});
		
			// Refine UI: rating filter
			jQuery('#results_resource').on('click', ".resource_rating", function(event){
				event.preventDefault();
			
				var r = jQuery(this).data('rating');
			
				jQuery('#filterModal_resource').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "resource", page: @resources_page, query: @query) %>?refine[]=rating:" + r, function(data) {
					jQuery("#results_resource").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
		
			// Refine UI: remove filter
			jQuery('#results_resource').on('click', ".removeFilter", function(event, data){
				event.preventDefault();
				var remove_id = jQuery(this).data('remove_id');
			
				jQuery('#filterModal_resource').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "resource", page: @resources_page, query: @query) %>?unrefine[]=" + remove_id, function(data) {
					jQuery("#results_resource").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
			
			jQuery('#resourceRefineContainer').slideReveal({
			  trigger: jQuery("#resourceResultsRefineTrigger"),
			  width: '200px',
			  top: '105px'
			});
			
			jQuery('#resourceResultsSelectAllTrigger').on('click', function(e) {
				var toggle = jQuery(this).data('toggle');
				toggle = !toggle;
				jQuery('.qsResultCheckbox').prop('checked', toggle ? 1 : 0);
				if (toggle) {
					jQuery(this).html('Deselect all');
				} else {
					jQuery(this).html('Select all');
				}
				jQuery(this).data('toggle', toggle)
			});
			
			init_continuous_pagination('resource_results');
	   // });
	</script>
	<% end %>
</div>