<div class="panel panel-primary" id="results_collection">
<% if @show %>
  <div class="panel-body">
    <div>
      <div class="row">
			<div class="col-sm-12">
				<h4>
					<div class="row">
						<div class="col-lg-5 col-md-5 col-sm-5 col-xs-5"><%= @collections_count %> Learning Collection<%= (@collections_count == 1) ? "" : "s" %>
							<% if @collections_num_pages > 0 %>
								<button id='collectionResultsRefineTrigger' class='btn btn-default'>Refine</button>
							<% end %>
							<button type="button" class="modalOpen btn btn-sm btn-primary hidden-md hidden-lg modalRefine" data-toggle="modal" data-target="#filterModal_collection" href="#">Refine</button>
						</div>
						<div id="collection_right" class="col-lg-7 col-md-7 col-sm-7 col-xs-7 text-right">
							<form class="searchPaging">
								<div class="searchFormElement">
									<nobr>Sort by <%= select_tag("collection_sort", options_for_select(sortOptions('collection'), @sort_defaults['collection']), {id: "collection_sort"}) %></nobr>
								</div>
							</form>
						</div>
					</div>
				</h4>
			</div>
		</div>
      <div class="row" id="collectionsResultsContainer">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
						
			<% if @refine and @refine["collection"] and (@refine["collection"].values.reduce(0) {|sum, v| sum = sum + v.length } > 0) %>
				<div id="collectionResults-filters">
					<strong>Filters: </strong>
					<% format_refine_filters(@refine, "collection").each do |r| %>
						<%= r[:field] %>: <em> <%= r[:value] %></em>
						<a href="#" data-remove_id="<%= r[:filter] %>" class="removeFilter"><i class="fa fa-times" aria-hidden="true"></i></a>
					<% end%>
				</div>
			<% end%>
		
			<div id="collectionResults-status">
				<div class="flash-notice" id="collectionResults-status-message">

				</div>
			</div>
		</div>
		<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="border-left: 1px dotted #ccc;">
		
<%
	col = 0
	thumb = false
%>
			<div id="collection_results" class="row results-pane" data-type="collection">
				<% @collections.each do |r| %>
					<%= render 'collection', collection: r %>
				<% end  %>
			</div>
			<div class="infinite-pagination-message"></div>
			<%= will_paginate @collections, renderer: Exchange::QuickSearchLinkRenderer, class: 'infinite-pagination-collections', type: 'collection', query: @query_proc %>
			<% if current_user %>
				<div class="row">
					<div class="col-md-12">
						<div class="text-center quickSearchAccessMessage"><i class="fa fa-eye-slash" aria-hidden="true"></i> Not available to public </div>
					</div>
				</div>
			<% end %>
		</div>
    </div>
    </div>
  </div>

    <%= render :partial => "quick_search/filter_modal.html.erb", :locals => {type: "collection", prefix: "collection" } %>

	<div class="hidden-sm hidden-xs col-md-3 col-lg-3 refineContainer" id="collectionRefineContainer">	
        <h3 class="quickSearchRefineHeader">Refine by</h3>
        <div class="row">
            <div class="col-md-12">
                <h6>Author name</h6>
                <%= autocomplete_field_tag(:collection_find_author, '', quick_search_autocomplete_refine_url(query: @query, field: "author.raw", type: "collection"), :"data-autocomplete-label" => "Sorry, nothing found.", :"data-update-elements" => nil, :size => 20, :id_element => "#collection_author", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "author") + hidden_field_tag(:collection_author) %>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h6>Title</h6>
                <%= autocomplete_field_tag(:collection_find_title, '', quick_search_autocomplete_refine_url(query: @query, field: "title.raw", type: "collection"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#collection_rtitle", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "title") + hidden_field_tag(:collection_rtitle) %>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h6>Keywords/tags</h6>
                <%= autocomplete_field_tag(:collection_find_keywords, '', quick_search_autocomplete_refine_url(query: @query, field: "all_keywords.raw", type: "collection"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#collection_keywords", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "all_keywords") + hidden_field_tag(:collection_keywords) %>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h6>Created for</h6>
                <% Rails.application.config.x.user_roles.each do |label, v| %>
                    <% is_selected = (session[:refine] and session[:refine]["collection"] and session[:refine]["collection"].has_key?("affiliation") and session[:refine]["collection"]["affiliation"].include?("affiliation:\"" + v.to_s + "\"")) %>
                    <% if !is_selected %>
                        <%= (check_box_tag(:collection_created_for, value = v, checked = is_selected, options = {class: "quickSearchRefineCheckbox", "data-filter": "affiliation"}) + " " + label).html_safe %><br/>
                    <% end %>
                <% end %>
            </div>
        </div>
        <div class="row">
                <div class="col-md-12">
                    <h6>Avg vistor rating</h6>
        <% 5.downto(1).each do |r| %>
            <%= ('<a href="#" class="collection_rating" data-rating="' + r.to_s + '">' + ('<img src="/assets/mortarboard_on.png" alt="Mortarboard" width="29" height="20"/>' * r) + '</a>').html_safe %> &amp; up<br/>
        <% end %>
                </div>
            </div>
<% if current_user %>
        <div class="row">
            <div class="col-md-12">
                <h6>Access type</h6>
                <% Rails.application.config.x.access_types.each do |label, v| %>
                    <% is_selected = (session[:refine] and session[:refine]["collection"] and session[:refine]["collection"].has_key?("access") and session[:refine]["collection"]["access"].include?("access:\"" + v.to_s + "\"")) %>
                    <% if !is_selected %>
                        <%= (check_box_tag(:collection_access, value = v, checked = is_selected, options = {class: "quickSearchRefineCheckbox", "data-filter": "access"}) + " " + label).html_safe %><br/>
                    <% end %>
                <% end %>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h6>Date last updated</h6>
                <select name="collection_date_last_updated_mode" id="collection_date_last_updated_mode" class="quickSearchRefineDateMode">
                    <option value="in">on</option>
                    <option value="before">before</option>
                    <option value="after">after</option>
                    <option value="between">between</option>
                </select>
                <input type="text" name="collection_date_last_updated_date" id="collection_date_last_updated_date" class="quickSearchRefineDate quickSearchRefineDatePicker"/>
                <span id="collection_date_last_updated_range"  style="display:none;">
                    <input type="text" name="collection_date_last_updated_min" id="collection_date_last_updated_min" class="quickSearchRefineDateRange quickSearchRefineDatePicker"/> - 
                    <input type="text" name="collection_date_last_updated_max" id="collection_date_last_updated_max" class="quickSearchRefineDateRange quickSearchRefineDatePicker"/>
                </span>
                <a href="#" onclick="return false;"><span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span></a>
            </div>
        </div>
<% end %>
        
        
	</div>

    <script type="text/javascript">
        //jQuery(document).ready(function() {
            jQuery("#quick_search_tabs").on('change', "#collection_num_items_per_page, #collection_sort", function(e) {
                jQuery.getJSON("<%= query_results_path(type: "collection", page: @collections_page, query: @query) %>?length=" + jQuery("#collection_num_items_per_page").val() + "&sort=" + jQuery("#collection_sort").val(), function(data) {
                    jQuery("#results_collection").html(data.html);
                    return true;
                });
            });

            // Refine UI: autocomplete add filter
            jQuery('#results_collection').off().on('railsAutocomplete.select', ".quickSearchRefineAutocomplete", function(event, data){
                var filter = jQuery(event.target).data('filter');
                event.preventDefault();
            
                if (!filter) { return false; }
                
                jQuery('#filterModal_collection').modal('hide');
                jQuery(".loading").show();
                jQuery.getJSON("<%= query_results_path(type: "collection", page: @collections_page, query: @query) %>?refine[]=" + filter + ":\"" + data.item.id + "\"", function(data) {
                    jQuery("#results_collection").html(data.html);
                    jQuery(".loading").hide();
                    return true;
                });
            });
            
            // Refine UI: checkbox add filter
            jQuery('#results_collection').on('change', "input.quickSearchRefineCheckbox", function(event){
                var filter = jQuery(event.target).data('filter');
                var val = jQuery(this).val();
                event.preventDefault();
            
                if (!filter || (val < 0)) { return false; }
            
                jQuery('#filterModal_collection').modal('hide');
                jQuery(".loading").show();
                jQuery.getJSON("<%= query_results_path(type: "collection", page: @collections_page, query: @query) %>?refine[]=" + filter + ":\"" + val + "\"", function(data) {
                    jQuery("#results_collection").html(data.html);
                    jQuery(".loading").hide();
                    return true;
                });
            });
            
            // Refine UI: date filter
            jQuery('#results_collection').on('change', "#collection_date_last_updated_mode", function(event){
                updateDateFilterUI('collection');
            });
            jQuery('#results_collection').on('blur', "#collection_date_last_updated_date, #collection_date_last_updated_min, #collection_date_last_updated_max", function(event){
                var date_expr = getDateExprFromFilterUI('collection');
            
                if (date_expr) {
                    jQuery('#filterModal_collection').modal('hide');
                    jQuery(".loading").show();
                    jQuery.getJSON("<%= query_results_path(type: "collection", page: @collections_page, query: @query) %>?refine[]=" + date_expr, function(data) {
                        jQuery("#results_collection").html(data.html);
                        jQuery(".loading").hide();
                        return true;
                    });
                }
            });
            $('.quickSearchRefineDatePicker').datetimepicker({"format": "YYYY-MM-DD"});
        
            // Refine UI: rating filter
            jQuery('#results_collection').on('click', ".collection_rating", function(event){
                event.preventDefault();
            
                var r = jQuery(this).data('rating');
                
                jQuery('#filterModal_collection').modal('hide');
                jQuery(".loading").show();
                jQuery.getJSON("<%= query_results_path(type: "collection", page: @collections_page, query: @query) %>?refine[]=rating:" + r, function(data) {
                    jQuery("#results_collection").html(data.html);
                    jQuery(".loading").hide();
                    return true;
                });
            });
        
            // Refine UI: remove filter
            jQuery('#results_collection').on('click', ".removeFilter", function(event, data){
                event.preventDefault();
                var remove_id = jQuery(this).data('remove_id');
                
                jQuery('#filterModal_collection').modal('hide');
                jQuery(".loading").show();
                jQuery.getJSON("<%= query_results_path(type: "collection", page: @collections_page, query: @query) %>?unrefine[]=" + remove_id, function(data) {
                    jQuery("#results_collection").html(data.html);
                    jQuery(".loading").hide();
                    return true;
                });
            });
            
            jQuery('#collectionRefineContainer').slideReveal({
			  trigger: jQuery("#collectionResultsRefineTrigger"),
			  width: '200px',
			  top: '105px'
			});
			
			
			init_continuous_pagination('collection_results');
        //});
    </script>
<% end %>
</div>
