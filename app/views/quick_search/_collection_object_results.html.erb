<div class="panel panel-primary" id="results_collection_object">
	<% if @show %>
		<div class="panel-body">
			<div>
				<div class="row">
					<div class="col-sm-12">
						<h4>
							<div class="row">
								<div class="col-lg-5 col-md-5 col-sm-5 col-xs-5"><%= @collection_objects_count %> UMMA Object<%= (@collection_objects_count == 1) ? "" : "s" %>
									<% if @collection_objects_num_pages > 0 %>
										<button id='colObjectResultsRefineTrigger' class='btn btn-default'>Refine</button>
									<% end %>
									<button type="button" class="modalOpen btn btn-sm btn-primary hidden-md hidden-lg modalRefine" data-toggle="modal" data-target="#filterModal_collection_object" href="#">Refine</button>
								</div>
								<div id="collection_object_right" class="col-lg-7 col-md-7 col-sm-7 col-xs-7 text-right">
									<form class="searchPaging">
										<div class="searchFormElement">
											<nobr>Sort by <%= select_tag("collection_object_sort", options_for_select(sortOptions('collection_object'), @sort_defaults['collection_object']), {id: "collection_object_sort"}) %></nobr>
										</div>
									</form>
								</div>
							</div>
						</h4>
					</div>
				</div>
				 <div class="row" id="colObjectResultsContainer">
				 	<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
						
						<% if @refine and @refine["collection_object"] and (@refine["collection_object"].values.reduce(0) {|sum, v| sum = sum + v.length } > 0) %>
							<div id="collectionObjectResults-filters">
								<strong>Filters: </strong>
								<% format_refine_filters(@refine, "collection_object").each do |r| %>
									<%= r[:field] %>: <em> <%= r[:value] %></em>
									<a href="#" data-remove_id="<%= r[:filter] %>" class="removeFilter"><i class="fa fa-times" aria-hidden="true"></i></a>
								<% end%>
							</div>
						<% end%>
						
				 		<div id="collectionObjectResults-status">
							<div class="flash-notice" id="collectionObjectResults-status-message">

							</div>
						</div>

						<% if (current_user && @available_collections_and_resources && (@available_collections_and_resources.length > 0)) %>
							<div class='pull-right'>
								<button id='colObjectResultsSelectAllTrigger' class='btn btn-default' data-toggle='0'>Select all</button>
							</div>
							<div id="collectionObjectResults-add">
								<form class="collectionObjectResultsAdd">
									Add selected to <%=

									if(@available_collections_and_resources.length > 25)
										autocomplete_field_tag(:find_resource_id, '', :autocomplete_collection_resource_title, :"data-autocomplete-label" => "Sorry, nothing found.", :size => 40, :id_element => "#collection_add_to_collection_id", :placeholder => "Search for a collection or resource") + hidden_field_tag(:collection_add_to_collection_id)
									else
										select_tag(:collection_add_to_collection_id, options_from_collection_for_select(@available_collections_and_resources, :id, lambda {|t| strip_tags(t.title)}), class:'', id:'collection_add_to_collection_id')
									end %>
									<%= button_tag "<span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span> Add".html_safe, href: "#", class: "btn btn-noBg btn-xs", id: "collectionObjectResultsAddToCollection"  %>
								</form>
								<form class="collectionObjectResultsCreate">
									Add selected to new  
									<%= select_tag(:collection_new_collection_type, options_for_select(['resource', 'collection']), class:'', id:'collection_new_collection_type') %>
									
									 with title <%=

									text_field_tag(:collection_new_collection_title, '', :size => 30, :class => 'form-control', :placeholder => "My new collection or resource")
									 %>
									<%= button_tag "<span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span> Create".html_safe, href: "#", class: "btn btn-noBg btn-xs", id: "collectionObjectResultsCreateNewCollection"  %>
								</form>
							</div>
						<% end %>
					</div>
					<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="border-left: 1px dotted #ccc;">
<%
	col = 0
	thumb = false
%>
						<div id="collection_object_results" class="row" data-type="collection_object">
							<% @collection_objects.each do |r| %>
								<%= render 'collection_object', collection_object: r %>
							<% end  %>
						</div>
						<div class="infinite-pagination-message"></div>
						<% Exchange::QuickSearchLinkRenderer.set_data(type: 'collection_object', query: @query_proc) %>
						<%= will_paginate @collection_objects, renderer: Exchange::QuickSearchLinkRenderer %>
						<% if current_user %>
							<div class="row">
								<div class="col-md-12">
									<div class="text-center quickSearchAccessMessage"><i class="fa fa-eye-slash" aria-hidden="true"></i> Not available to public </div>
								</div>
							</div>
						<% end %>
					</div>
				</div>
			</div>
			<%= render(partial: 'resources/media_overlay') %>
		</div>
		
		zzz
		<%= render :partial => "quick_search/filter_modal.html.erb", :locals => {type: "collection_object", prefix: "colObject" } %>
xx
		<div class="hidden-sm hidden-xs col-md-3 col-lg-3 refineContainer" id="colObjectRefineContainer">
			<h3 class="quickSearchRefineHeader">Refine by</h3>
			<% if (!session[:refine].is_a?(Hash) or !session[:refine]['collection_object'].is_a?(Hash) or !session[:refine]['collection_object']['on_display'] or !session[:refine]['collection_object']['on_display'].include?("on_display:\"YES\"")) %>  
				<div class="row">
					<div class="col-md-12">
						<h6>On display?</h6>
						<input type="checkbox" name="collection_object_on_display" class="quickSearchRefineCheckbox" value="YES" data-filter="on_display"/> 
					</div>
				</div>
			<% end %>
			<div class="row">
				<div class="col-md-12">
					<h6>Artist/Maker</h6>
					<%= autocomplete_field_tag(:collection_object_find_artist, '', quick_search_autocomplete_refine_url(query: @query, field: "artist.raw", type: "collection_object"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#collection_object_artist", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "artist") + hidden_field_tag(:collection_object_artist) %>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h6>Artist nationality</h6>
					<%= select_tag(:collection_object_artist_nationality, get_values_for_refine_for_select('artist_nationality.raw', @query, "collection_object", session[:refine]), "data-filter": "artist_nationality", :class => 'quickSearchRefineSelect')  %>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h6>Date created</h6>
	
					<select name="collection_object_date_created_mode" id="collection_object_date_created_mode" class="quickSearchRefineDateMode">
						<option value="in">in</option>
						<option value="before">before</option>
						<option value="after">after</option>
						<option value="between">between</option>
					</select>
					<input type="text" name="collection_object_date_created_year" id="collection_object_date_created_year" class="quickSearchRefineDate"/>
					<span id="collection_object_date_created_range"  style="display:none;">
						<input type="text" name="collection_object_date_created_min" id="collection_object_date_created_min" class="quickSearchRefineDateRange"/> - 
						<input type="text" name="collection_object_date_created_max" id="collection_object_date_created_max" style="display:none;" class="quickSearchRefineDateRange"/>
					</span>
					<a href="#" onclick="return false;"><span class='glyphicon glyphicon-plus-sign' aria-hidden='true'></span></a>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h6>Collection area</h6>
					<%= select_tag(:collection_object_collection_area, get_values_for_refine_for_select('collection_area.raw', @query, "collection_object", session[:refine]), "data-filter": "collection_area", :class => 'quickSearchRefineSelect')  %>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h6>Style/Group/Movement</h6>
					<%= autocomplete_field_tag(:collection_object_find_style, '', quick_search_autocomplete_refine_url(query: @query, field: "style.raw", type: "collection_object"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#collection_object_style", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "style") + hidden_field_tag(:collection_object_style) %>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h6>Medium & Support</h6>
					<%= autocomplete_field_tag(:collection_object_find_medium, '', quick_search_autocomplete_refine_url(query: @query, field: "medium.raw", type: "collection_object"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#collection_object_medium", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "medium") + hidden_field_tag(:collection_object_medium) %>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h6>Classification/Object Type</h6>
					<%= autocomplete_field_tag(:collection_object_find_classification, '', quick_search_autocomplete_refine_url(query: @query, field: "classification.raw", type: "collection_object"), :"data-autocomplete-label" => "Sorry, nothing found.", :size => 20, :id_element => "#collection_object_classification", :placeholder => "Search", autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: "false", :class => 'quickSearchRefineAutocomplete', "data-filter": "classification") + hidden_field_tag(:collection_object_classification) %>
				</div>
			</div>
		</div>
	
	<script type="text/javascript">
		//jQuery(document).ready(function() {
			jQuery("#quick_search_tabs").on('change', "#collection_object_num_items_per_page, #collection_object_sort", function(e) {
				jQuery.getJSON("<%= query_results_path(type: "collection_object", page: @collection_objects_page, query: @query) %>?length=" + jQuery("#collection_object_num_items_per_page").val() + "&sort=" + jQuery("#collection_object_sort").val(), function(data) {
					jQuery("#results_collection_object").html(data.html);
					return true;
				});
			}).on('click', "#collectionObjectResultsAddToCollection", function(e) {
				e.preventDefault();

				var add_to_collection_id = jQuery("#collection_add_to_collection_id").val();

				var ids = jQuery("#results_collection_object input.qsResultCheckbox").map(function() {
					return jQuery(this).prop('checked') ? jQuery(this).val(): undefined;
				}).get()

				if (!ids || (ids.length == 0)) {
					jQuery("#collectionObjectResults-status").slideDown(250);
					jQuery("#collectionObjectResults-status-message").html("No items are checked");
					window.setTimeout(function() {
						jQuery("#collectionObjectResults-status").slideUp(250);
					}, 3000);
					return false;
				}

				jQuery.post("/resources/" + add_to_collection_id + "/add_child_resources", {"add_child_resource_ids[]": ids}, function(data) {
					if (data.status == 'err') {
						jQuery("#collectionObjectResults-status").slideDown(250);
						jQuery("#collectionObjectResults-status-message").html(data.error);
						window.setTimeout(function() {
							jQuery("#collectionObjectResults-status").slideUp(250);
						}, 3000);
					} else {
						var n = data.numAdded;
						existed_msg = (data.numExisting > 0) ? ((data.numExisting == 1) ? " (1 already exists)" :  " (" + data.numExisting + " already exist)") : "";

						jQuery("#collectionObjectResults-status").slideDown(250);
						jQuery("#collectionObjectResults-status-message").html(((n == 1) ? "Added 1 collection object to collection" : "Added " + n + " collection objects to collection") + existed_msg);
						window.setTimeout(function() {
							jQuery("#collectionObjectResults-status").slideUp(250);
						}, 3000);

						jQuery("#results_collection_object input.qsResultCheckbox").prop('checked', false);
					}
					return true;
				}, 'json');
				return false;
			}).on('click', "#collectionObjectResultsCreateNewCollection", function(e) {
				e.preventDefault();

				var collection_type = jQuery("#collection_new_collection_type").val();
				var collection_title = jQuery("#collection_new_collection_title").val();

				var ids = jQuery("#results_collection_object input.qsResultCheckbox").map(function() {
					return jQuery(this).prop('checked') ? jQuery(this).val(): undefined;
				}).get()

				if (!ids || (ids.length == 0)) {
					jQuery("#collectionObjectResults-status").slideDown(250);
					jQuery("#collectionObjectResults-status-message").html("No items are checked");
					window.setTimeout(function() {
						jQuery("#collectionObjectResults-status").slideUp(250);
					}, 3000);
					return false;
				}

				jQuery.post("/resources/create_new_resource_with_children", {"type": collection_type, "title": collection_title, "add_child_resource_ids[]": ids}, function(data) {
					if (data.status == 'err') {
						jQuery("#collectionObjectResults-status").slideDown(250);
						jQuery("#collectionObjectResults-status-message").html(data.error);
						window.setTimeout(function() {
							jQuery("#collectionObjectResults-status").slideUp(250);
						}, 3000);
					} else {
						var n = data.numAdded;
						existed_msg = (data.numExisting > 0) ? ((data.numExisting == 1) ? " (1 already exists)" :  " (" + data.numExisting + " already exist)") : "";

						jQuery("#collectionObjectResults-status").slideDown(250);
						jQuery("#collectionObjectResults-status-message").html(((n == 1) ? "Created new " + collection_type + " with  1 collection object" : "Created new " + collection_type + " with " + n + " collection objects") + existed_msg);
						window.setTimeout(function() {
							jQuery("#collectionObjectResults-status").slideUp(250);
						}, 3000);

						jQuery("#results_collection_object input.qsResultCheckbox").prop('checked', false);
						jQuery("#collection_new_collection_title").val('');
					}
					return true;
				}, 'json');
				return false;
			});
		
		
			// Refine UI: autocomplete add filter
			jQuery('#results_collection_object').off().on('railsAutocomplete.select', '.quickSearchRefineAutocomplete', function(event, data){
				var filter = jQuery(event.target).data('filter');
				event.preventDefault();
			
				if (!filter) { return false; }
			
				jQuery('#filterModal_collection_object').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "collection_object", page: @collection_objects_page, query: @query) %>?refine[]=" + filter + ":\"" + data.item.id + "\"", function(data) {
					jQuery("#results_collection_object").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
		
			// Refine UI: <select> add filter
			jQuery('#results_collection_object').on('change', "select.quickSearchRefineSelect", function(event){
				var filter = jQuery(event.target).data('filter');
				var val = jQuery(this).val();
				event.preventDefault();
			
				if (!filter) { return false; }
				jQuery('#filterModal_collection_object').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "collection_object", page: @collection_objects_page, query: @query) %>?refine[]=" + filter + ":\"" + val + "\"", function(data) {
					jQuery("#results_collection_object").html(data.html);
					jQuery(".loading").hide();
				
					return true;
				});
			});
		
			// Refine UI: date filter
			jQuery('#results_collection_object').on('change', "#collection_object_date_created_mode", function(event){
				var mode = jQuery(this).val();  
			
				if (mode == 'between') {
					jQuery("#collection_object_date_created_range, #collection_object_date_created_min, #collection_object_date_created_max").show().attr('disabled', false);
					jQuery("#collection_object_date_created_year").hide().attr('disabled', true);
				} else {
					jQuery("#collection_object_date_created_range, #collection_object_date_created_min, #collection_object_date_created_max").hide().attr('disabled', true);
					jQuery("#collection_object_date_created_year").show().attr('disabled', false);
				}
			});
			jQuery('#results_collection_object').on('blur', "#collection_object_date_created_year, #collection_object_date_created_min, #collection_object_date_created_max", function(event){
				var mode = jQuery("#collection_object_date_created_mode").val();  
				var date_expr = null;
			
				if (mode == 'between') {
					var min = parseInt(jQuery("#collection_object_date_created_min").val()); 
					var max = parseInt(jQuery("#collection_object_date_created_max").val()); 
					if ((min > 0) && (max > 0) && (min <= max)) {
						date_expr = "start_date:>=" + min + " AND " + "end_date:<=" + max;
					}
				} else {
					var year = parseInt(jQuery("#collection_object_date_created_year").val()); 
					if (year > 0) {
						if (mode == 'in') {
							date_expr = "start_date:" + year;
						} else if(mode == 'before') {
							date_expr = "start_date:<=" + year;
						} else if(mode == 'after') {
							date_expr = "end_date:>=" + year;
						}
					}
				}
			
				if (date_expr) {
					jQuery('#filterModal_collection_object').modal('hide');
					jQuery(".loading").show();
					jQuery.getJSON("<%= query_results_path(type: "collection_object", page: @collection_objects_page, query: @query) %>?refine[]=" + date_expr, function(data) {
						jQuery("#results_collection_object").html(data.html);
						jQuery(".loading").hide();
						return true;
					});
				}
			});
		
			 // Refine UI: checkbox add filter
			jQuery('#results_collection_object').on('change', "input.quickSearchRefineCheckbox", function(event){
				var filter = jQuery(event.target).data('filter');
				var val = jQuery(this).val();
				event.preventDefault();
			
				if (!filter || (val < 1)) { return false; }
			
				jQuery('#filterModal_collection_object').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "collection_object", page: @collection_objects_page, query: @query) %>?refine[]=" + filter + ":\"" + val + "\"", function(data) {
					jQuery("#results_collection_object").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
		
			// Refine UI: remove filter
			jQuery('#results_collection_object').on('click', ".removeFilter", function(event, data){
				event.preventDefault();
				var remove_id = jQuery(this).data('remove_id');
				jQuery('#filterModal_collection_object').modal('hide');
				jQuery(".loading").show();
				jQuery.getJSON("<%= query_results_path(type: "collection_object", page: @collection_objects_page, query: @query) %>?unrefine[]=" + remove_id, function(data) {
					jQuery("#results_collection_object").html(data.html);
					jQuery(".loading").hide();
					return true;
				});
			});
			
			jQuery('#colObjectRefineContainer').slideReveal({
			  trigger: jQuery("#colObjectResultsRefineTrigger"),
			  width: '200px',
			  top: '105px'
			});
			
			jQuery('#colObjectResultsSelectAllTrigger').on('click', function(e) {
				var toggle = jQuery(this).data('toggle');
				toggle = !toggle;
				jQuery('.qsResultCheckbox').prop('checked', toggle ? 1 : 0);
				if (toggle) {
					jQuery(this).html('Deselect all');
				} else {
					jQuery(this).html('Select all');
				}
				jQuery(this).data('toggle', toggle)
			});
	</script>
<% end %>
</div>